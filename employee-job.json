{
	"jobConfig": {
		"name": "employee-job",
		"description": "",
		"role": "arn:aws:iam::174732274675:role/Assignement2GlueServiceRole",
		"command": "glueetl",
		"version": "4.0",
		"runtime": null,
		"workerType": "G.1X",
		"numberOfWorkers": 10,
		"maxCapacity": 10,
		"maxRetries": 0,
		"timeout": 2880,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "employee-job",
		"scriptLocation": "s3://aws-glue-assets-174732274675-ap-south-1/scripts/",
		"language": "python-3",
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2023-08-01T05:10:38.260Z",
		"developerMode": true,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-174732274675-ap-south-1/temporary/",
		"logging": true,
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"metrics": true,
		"spark": true,
		"bookmark": "job-bookmark-disable",
		"sparkPath": "s3://aws-glue-assets-174732274675-ap-south-1/sparkHistoryLogs/",
		"flexExecution": false,
		"minFlexWorkers": null
	},
	"dag": {},
	"hasBeenSaved": false,
	"script": "import sys\nfrom awsglue.transforms import *\nfrom awsglue.utils import getResolvedOptions\nfrom pyspark.context import SparkContext\nfrom awsglue.context import GlueContext\nfrom awsglue.job import Job\nfrom awsglue.dynamicframe import DynamicFrame\n\n## @params: [JOB_NAME]\nargs = getResolvedOptions(sys.argv, ['JOB_NAME'])\n\nsc = SparkContext()\nglueContext = GlueContext(sc)\nspark = glueContext.spark_session\njob = Job(glueContext)\njob.init(args['JOB_NAME'], args)\n\nlogger = glueContext.get_logger()\nlogger.info(\"Assignment2 employee-job started\")\n#Create dynamic frame from s3\ndynamicFrame = glueContext.create_dynamic_frame.from_options(\n    connection_type=\"s3\",\n    connection_options={\"paths\": [\"s3://sb-employee/\"]},\n    format=\"csv\",\n    format_options={\n        \"withHeader\": True\n        # \"optimizePerformance\": True,\n    },\n)\n#Convert dynamic frame to DF\ndsDf = dynamicFrame.toDF()\n\n#Apply filter to fetch only IT programmer\noutputDf = dsDf.filter(dsDf.JOB_ID == 'IT_PROG')\nlogger.info(\"Filtered IT programmer employees\")\n\n#Convert dataframe to dynamic frame\noutputDynamicFrame = DynamicFrame.fromDF(outputDf, glueContext, \"output_dynamic_frame\")\n\n#Push output file to s3\nglueContext.write_dynamic_frame.from_options(\\\nframe = outputDynamicFrame,\\\nconnection_options = {'path': 's3://s3-shraddha/assignment2-output'},\\\nconnection_type = 's3',\\\nformat = 'json')\n\nlogger.info(\"End of employee job script\")\n#Apply transforms end\njob.commit()"
}